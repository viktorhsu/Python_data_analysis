1、通过将二维列表作为参数，传递给index创建二级索引
hierarchical_data = pd.Series(np.random.uniform(size=9), 
                              index=[["a", "a", "a", "b", "b", "c", "c", "d", "d"],
                                      [1, 2, 3, 1, 3, 1, 2, 2, 3]])
#该数据的索引为一个MutiIndex对象



2、对含有多级索引的Series通过loc[]方法调取行数据

#调取由外层索引至内层索引，如果只需要调取外层部分，可以只给loc[]传入一个外层索引的标签
#只调取外层索引中，索引标签为c的部分
hierarchical_data.loc['c']

#可以通过列表的方式传入多个外层索引标签值，一次性调取多个不连续的外层索引
hierarchical_data.loc[['a','d']]

#也可以以切片的方式，一次性调取多个连续的外层索引
hierarchical_data.loc['a':'c']

#如果需要调取内层索引，则必须传入2个索引标签值，即外层索引标签和内层索引标签
hierarchical_data.loc['a',2]
hierarchical_data.loc[:,2]

#如果需要按照数据的行数来调取数据，则可以不使用loc[]方法，而直接将特定的行数传递给数据集
#因为数据存储在内存上都是按照默认的整数索引进行存储的
hierarchical_data[8]
hierarchical_data[2:8]
hierarchical_data[2:]



3、可以通过unstack()方法，将多级索引数据的内层索引，解构成列
hierarchical_data.unstack()

#也可以通过stack()方法，将解构操作复原
hierarchical_data.unstack().stack()



4、以二维数组的方式，将多级索引传入给index和columns，创建一个具有二级索引的DataFrame
hierarchical_frame = pd.DataFrame(np.arange(12).reshape(4,3), 
                                  index=[['a', 'a', 'b', 'b'], [1, 2, 1, 2]],
                                 columns=[['Ohio', 'Ohio', 'Colorado'], ['Green', 'Red', 'Green']])



5、可以通过DataFrame的index.names和columns.names方法，分别对其多级行索引和多级列索引进行命名
hierarchical_frame.index.names = ['key1', 'key2']
hierarchical_frame.columns.names = ['state', 'color']



6、可以通过index.nlevels和columns.nlevels属性，分别查看DataFrame的行索引和列索引的层级数
hierarchical_data.index.nlevels
hierarchical_frame.columns.nlevels



7、调用具有多级列索引的DataFrame的列时，必须含有外层列索引

#调取单个外层列索引
hierarchical_frame['Ohio']

#调取多个外层列索引
hierarchical_frame[['Ohio', 'Colorado']]

#调取单个外层列索引的部分内层列索引
hierarchical_frame['Ohio', 'Green']



8、调取具有多级行索引的DataFrame的行时，需要通过loc[]方法，必须具有最外层的行索引标签

#调取单个最外层的行索引标签
hierarchical_frame.loc['a']

#调取多个最外层的行索引
hierarchical_frame.loc[['a', 'b']]

#调取单个最外层行索引，以及其部分内层索引
hierarchical_frame.loc['a', 2]

#调取单个最外层行索引，以及其所有内层索引
hierarchical_frame.loc['a', :]



9、通过swaplevel()方法交换具有多级索引的DataFrame的索引层级

#交换行索引，指定axis=0
#key1和key2均为行索引的标签，属于不同的层级
hierarchical_frame.swaplevel('key1', 'key2', axis=0)

#交换列索引，指定axis=1
#state和color均为dataframe的列索引标签，需指定axis=1
hierarchical_frame.swaplevel('state', 'color', axis=1)



10、对具有多级行索引或多级列索引的根据指定的索引层级中的索引值进行排序

#根据行索引中的值进行排序，最外层索引，即axis=0, level=0
hierarchical_frame.sort_index(level=0, axis=0)

#根据行索引中的值进行排序，第二层索引，即axis=0, level=1
hierarchical_frame.sort_index(level=1, axis=0)

#根据列索引中的值进行排序，最外层索引，即axis=1, level=0
hierarchical_frame.sort_index(level=0, axis=1)

#根据列索引中的值进行排序，最外层索引，即axis=1, level=1
hierarchical_frame.sort_index(level=1, axis=1)



11、对指定层级的索引，使用groupby和聚合函数

#对最外层的行索引进行分组聚合，即axis=0, level=0
hierarchical_frame.groupby(level=0, axis=0).sum()

#对第二层的行索引进行分组聚合，即axis=0, level=1
hierarchical_frame.groupby(level=1, axis=0).sum()

#对最外层的列索引进行分组聚合，即axis=1, level=0
hierarchical_frame.groupby(level=0, axis=1).sum()

#对第二层的列索引进行分组聚合，即axis=1, level=1
hierarchical_frame.groupby(level=1, axis=1).sum()






















